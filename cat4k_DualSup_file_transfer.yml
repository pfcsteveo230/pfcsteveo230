---
- name: Catalyst 4500 Pre-Update file transfers
  hosts: all
  gather_facts: true
  tasks:

#### The variables below are being defined in the Inventory groups ending in _upgrade and/or in the Template for the play ####

#xfer_prot: ftp
#xfer_auth: ftpwrite:writeftp@
#file_serv: 10.5.32.94
## Change the upgrade image and File size below ##
#upgrade_image: cat4500e-universalk9.SPA.03.11.05.E.152-7.E5.bin
#file_size_kb: 200000

### IOS SECTION ###

  ## Display system information for reference in case a conditional triggers abort. ##

  - name: gather ios facts
    cisco.ios.ios_facts:
      gather_subset: all
    when: ansible_network_os == 'cisco.ios.ios'

  - name: Is the file already in the directory?
    cisco.ios.ios_command:
      commands:
      - dir
    register: dir_output
    when:
      - ansible_network_os == 'cisco.ios.ios'

  - name: bootflash contents!!
    debug:
      msg: "{{ dir_output.stdout_lines }}"

  - name: Notify that play is ending because the device is already running the image to be copied. 
    debug:
      msg: "ABORTING TRANSFER. This device already contains {{ upgrade_image }}."
    when:
      - ansible_network_os == 'cisco.ios.ios'
      - ansible_net_image == upgrade_image

  - name: End play for this host because it is already up to date. 
    ansible.builtin.meta: end_host
    when: ansible_net_image == "bootflash:{{ upgrade_image }}"

  - name: Not Enough Space 
    debug:
      msg: "ABORTING TRANSFER. This device has {{ansible_net_filesystems_info['bootflash:'].spacefree_kb|int}}kb free memory. {{ file_size_kb}} is required."
    when:
      - ansible_network_os == 'cisco.ios.ios'
      - ansible_net_filesystems_info['bootflash:'].spacefree_kb|int < file_size_kb|int

  - name: End play for this host because it is already up to date. 
    ansible.builtin.meta: end_host
    when: ansible_net_filesystems_info['bootflash:'].spacefree_kb|int < file_size_kb|int


  ## Transfer and Verify only if there is enough space and not already on the same version ##



  - name: transfer IOS image {{ upgrade_image }}
    cisco.ios.ios_command:
      commands:
      - command: copy {{ xfer_prot }}://{{ xfer_auth }}{{ file_serv }}/{{ upgrade_image }} bootflash:{{ upgrade_image }}
        prompt: 'Destination filename [{{ upgrade_image }}]?'
        answer: "\r"
      wait_for:
      - result[0] contains OK
    when:
      - ansible_network_os == 'cisco.ios.ios'
    vars:
      ansible_command_timeout: 10800
    changed_when: true

  - name: verify IOS image
    cisco.ios.ios_command:
      commands:
      - command: verify bootflash:{{ upgrade_image }}
      wait_for:
      - result[0] contains verified
    when:
      - ansible_network_os == 'cisco.ios.ios'
    register: ios_image_verify
    vars:
      ansible_command_timeout: 600

  - name: display verification
    debug:
      msg: "{{ ios_image_verify }}"
    when:
      - ansible_network_os == 'cisco.ios.ios'
    

  ## Copy to secondary file system  ##

  - name: copy to secondary file system
    cisco.ios.ios_command:
      commands:
      - command: copy bootflash:{{ upgrade_image }} slavebootflash:{{ upgrade_image }}
        prompt: Destination filename [{{ upgrade_image }}]?
        answer: "\r"
      wait_for:
      - result[0] contains copied
    when:
      - ansible_network_os == 'cisco.ios.ios'
    vars:
      ansible_command_timeout: 1800
    changed_when: true

  - name: verify file is in secondary file system
    cisco.ios.ios_command:
      commands:
      - command: "dir slavebootflash:"
      wait_for:
      - result[0] contains {{ upgrade_image }}
    when:
      - ansible_network_os == 'cisco.ios.ios'
    register: dir_slaveboot

  - name: Success!!
    debug:
      msg: "{{ dir_slaveboot.stdout_lines }}"


### NXOS Section ###

## Display system information for reference in case a conditional triggers abort. ##
#  - name: Gather nxos facts
#    cisco.nxos.nxos_facts:
#      gather_subset: all
#    when: ansible_network_os == 'cisco.nxos.nxos'
#
#  - name: Ensure device is not running on the image to be copied. 
#    debug:
#      msg: "ABORTING TRANSFER. This device is already using {{ ansible_net_system }} image file {{ ansible_net_image }}."
#    when:
#      - ansible_network_os == 'cisco.nxos.nxos'
#      - ansible_net_image == upgrade_image
#
#  - name: End play for this host because it is is already running the new file. 
#    meta: end_host
#    when:
#      - ansible_network_os == 'cisco.nxos.nxos'
#      - ansible_net_image == upgrade_image
#
#  - name: Checking storage space requirements.
#    debug:
#      var: "ABORTING TRANSFER. This device has {{ansible_net_memfree_mb|int}}mb free memory. {{ file_size_mb }}mb is required }}."
#    when:
#      - ansible_network_os == 'cisco.nxos.nxos'
#      - ansible_net_memfree_mb|int < file_size_mb|int
#
#  - name: End play for this host because it does not have space. 
#    meta: end_host
#    when:
#      - ansible_network_os == 'cisco.nxos.nxos'
#      - ansible_net_memfree_mb|int < file_size_mb|int
#
#  - name: transfer NXOS image {{ upgrade_image }}
#    cisco.nxos.nxos_command:
#      commands:
#      - command: copy {{ xfer_prot }}://{{ xfer_auth }}{{ file_serv }}/{{ upgrade_image }} bootflash:{{ upgrade_image }}
#        prompt: Enter vrf
#        answer: "{{ xfer_vrf }}"
#      wait_for:
#      - result[0] contains complete.
#    when:
#      - ansible_network_os == 'cisco.nxos.nxos'
#      - ansible_net_memfree_mb|int > file_size_mb|int
#      - ansible_net_image != upgrade_image
#    vars:
#      ansible_command_timeout: 10800
#
#  - name: verify NXOS image
#    cisco.nxos.nxos_command:
#      commands:
#      - command: show install all impact nxos bootflash:{{ upgrade_image }}
#      wait_for:
#      - result[0] contains SUCCESS
#    when:
#      - ansible_network_os == 'cisco.nxos.nxos'
#      - ansible_net_memfree_mb|int > file_size_mb|int
#      - ansible_net_image != upgrade_image
#    register: nxos_verify
#    vars:
#      ansible_command_timeout: 600
#
#  - name: display verification
#    debug:
#      msg: "{{ nxos_verify }}"
#    when:
#      - ansible_network_os == 'cisco.nxos.nxos'
#    
#